use anyhow as ah;

#[derive(Debug, Clone, PartialEq, PartialOrd, Eq, Ord)]
pub struct Language {
    pub region: String,
    pub language: String,
    pub region_tag: String,
    pub language_tag: String,
    pub tag: String,
}

impl Language {
    pub fn from_tag(tag: &str) -> ah::Result<Self> {
        let parts: Vec<&str> = tag.splitn(2, '-').collect();

        if parts.len() != 2 {
            ah::bail!(
                "Invalid language tag format; expected 'language-region', but have '{:?}' parts.",
                parts
            );
        }

        let language_tag: String = parts[0].trim().to_lowercase();
        let region_tag: String = parts[1].trim().to_lowercase();

        let language = expand_lang(&language_tag)
            .ok_or(ah::anyhow!("Unknown language tag {}", language_tag))?;

        let region =
            expand_region(&region_tag).ok_or(ah::anyhow!("Unknown region tag {}", region_tag))?;

        Ok(Self {
            language,
            region,
            language_tag,
            region_tag,
            tag: tag.to_string(),
        })
    }
}

// https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

pub fn expand_lang(language: &str) -> Option<String> {
    match language {
        "aa" => Some("Afar"),
        "ab" => Some("Abkhazian"),
        "ae" => Some("Avestan"),
        "af" => Some("Afrikaans"),
        "ak" => Some("Akan"),
        "am" => Some("Amharic"),
        "an" => Some("Aragonese"),
        "ar" => Some("Arabic"),
        "as" => Some("Assamese"),
        "av" => Some("Avaric"),
        "ay" => Some("Aymara"),
        "az" => Some("Azerbaijani"),
        "ba" => Some("Bashkir"),
        "be" => Some("Belarusian"),
        "bg" => Some("Bulgarian"),
        "bi" => Some("Bislama"),
        "bm" => Some("Bambara"),
        "bn" => Some("Bengali"),
        "bo" => Some("Tibetan"),
        "br" => Some("Breton"),
        "bs" => Some("Bosnian"),
        "ca" => Some("Catalan"),
        "ce" => Some("Chechen"),
        "ch" => Some("Chamorro"),
        "co" => Some("Corsican"),
        "cr" => Some("Cree"),
        "cs" => Some("Czech"),
        "cv" => Some("Chuvash"),
        "cy" => Some("Welsh"),
        "da" => Some("Danish"),
        "de" => Some("German"),
        "dv" => Some("Dhivehi"),
        "dz" => Some("Dzongkha"),
        "ee" => Some("Ewe"),
        "en" => Some("English"),
        "eo" => Some("Esperanto"),
        "es" => Some("Spanish"),
        "et" => Some("Estonian"),
        "eu" => Some("Basque"),
        "fa" => Some("Persian"),
        "ff" => Some("Fulah"),
        "fi" => Some("Finnish"),
        "fj" => Some("Fijian"),
        "fo" => Some("Faroese"),
        "fr" => Some("French"),
        "ga" => Some("Irish"),
        "gl" => Some("Galician"),
        "gn" => Some("Guarani"),
        "gu" => Some("Gujarati"),
        "gv" => Some("Manx"),
        "ha" => Some("Hausa"),
        "he" => Some("Hebrew"),
        "hi" => Some("Hindi"),
        "hr" => Some("Croatian"),
        "ht" => Some("Haitian"),
        "hu" => Some("Hungarian"),
        "hy" => Some("Armenian"),
        "hz" => Some("Herero"),
        "id" => Some("Indonesian"),
        "ie" => Some("Interlingue"),
        "ig" => Some("Igbo"),
        "ik" => Some("Inupiaq"),
        "in" => Some("Indonesian"),
        "io" => Some("Ido"),
        "is" => Some("Icelandic"),
        "it" => Some("Italian"),
        "iu" => Some("Inuktitut"),
        "iw" => Some("Hebrew"),
        "ja" => Some("Japanese"),
        "ji" => Some("Yiddish"),
        "jv" => Some("Javanese"),
        "jw" => Some("Javanese"),
        "ka" => Some("Georgian"),
        "kg" => Some("Kongo"),
        "ki" => Some("Kikuyu"),
        "kj" => Some("Kuanyama"),
        "kk" => Some("Kazakh"),
        "kl" => Some("Kalaallisut"),
        "km" => Some("Khmer"),
        "kn" => Some("Kannada"),
        "ko" => Some("Korean"),
        "kr" => Some("Kanuri"),
        "ks" => Some("Kashmiri"),
        "ku" => Some("Kurdish"),
        "kv" => Some("Komi"),
        "kw" => Some("Cornish"),
        "ky" => Some("Kirghiz"),
        "la" => Some("Latin"),
        "lb" => Some("Luxembourgish"),
        "lg" => Some("Ganda"),
        "li" => Some("Limburgan"),
        "ln" => Some("Lingala"),
        "lo" => Some("Lao"),
        "lt" => Some("Lithuanian"),
        "lv" => Some("Latvian"),
        "mg" => Some("Malagasy"),
        "mh" => Some("Marshallese"),
        "mi" => Some("Maori"),
        "mk" => Some("Macedonian"),
        "ml" => Some("Malayalam"),
        "mn" => Some("Mongolian"),
        "mo" => Some("Moldavian"),
        "mr" => Some("Marathi"),
        "mt" => Some("Maltese"),
        "my" => Some("Burmese"),
        "na" => Some("Nauru"),
        "ng" => Some("Ndonga"),
        "nl" => Some("Dutch"),
        "no" => Some("Norwegian"),
        "nv" => Some("Navajo"),
        "ny" => Some("Nyanja"),
        "oj" => Some("Ojibwa"),
        "om" => Some("Oromo"),
        "os" => Some("Ossetian"),
        "pa" => Some("Panjabi"),
        "pi" => Some("Pali"),
        "pl" => Some("Polish"),
        "ps" => Some("Pushto"),
        "pt" => Some("Portuguese"),
        "qu" => Some("Quechua"),
        "rm" => Some("Romansh"),
        "rn" => Some("Rundi"),
        "ro" => Some("Romanian"),
        "ru" => Some("Russian"),
        "rw" => Some("Kinyarwanda"),
        "sa" => Some("Sanskrit"),
        "sc" => Some("Sardinian"),
        "sd" => Some("Sindhi"),
        "sg" => Some("Sango"),
        "si" => Some("Sinhala"),
        "sk" => Some("Slovak"),
        "sl" => Some("Slovenian"),
        "sm" => Some("Samoan"),
        "sn" => Some("Shona"),
        "so" => Some("Somali"),
        "sq" => Some("Albanian"),
        "sr" => Some("Serbian"),
        "ss" => Some("Swati"),
        "su" => Some("Sundanese"),
        "sv" => Some("Swedish"),
        "ta" => Some("Tamil"),
        "te" => Some("Telugu"),
        "tg" => Some("Tajik"),
        "th" => Some("Thai"),
        "ti" => Some("Tigrinya"),
        "tk" => Some("Turkmen"),
        "tl" => Some("Tagalog"),
        "tn" => Some("Tswana"),
        "tr" => Some("Turkish"),
        "ts" => Some("Tsonga"),
        "tt" => Some("Tatar"),
        "tw" => Some("Twi"),
        "ty" => Some("Tahitian"),
        "ug" => Some("Uighur"),
        "uk" => Some("Ukrainian"),
        "ur" => Some("Urdu"),
        "uz" => Some("Uzbek"),
        "ve" => Some("Venda"),
        "vi" => Some("Vietnamese"),
        "wa" => Some("Walloon"),
        "wo" => Some("Wolof"),
        "xh" => Some("Xhosa"),
        "yi" => Some("Yiddish"),
        "yo" => Some("Yoruba"),
        "za" => Some("Zhuang"),
        "zh" => Some("Chinese"),
        "zu" => Some("Zulu"),
        _ => None,
    }
    .map(str::to_string)
}

pub fn expand_region(region: &str) -> Option<String> {
    match region {
        "ad" => Some("Andorra"),
        "af" => Some("Afghanistan"),
        "ai" => Some("Anguilla"),
        "al" => Some("Albania"),
        "am" => Some("Armenia"),
        "ao" => Some("Angola"),
        "aq" => Some("Antarctica"),
        "ar" => Some("Argentina"),
        "at" => Some("Austria"),
        "au" => Some("Australia"),
        "aw" => Some("Aruba"),
        "az" => Some("Azerbaijan"),
        "bb" => Some("Barbados"),
        "bd" => Some("Bangladesh"),
        "be" => Some("Belgium"),
        "bg" => Some("Bulgaria"),
        "bh" => Some("Bahrain"),
        "bi" => Some("Burundi"),
        "bj" => Some("Benin"),
        "bm" => Some("Bermuda"),
        "bo" => Some("Bolivia"),
        "br" => Some("Brazil"),
        "bs" => Some("Bahamas"),
        "bt" => Some("Bhutan"),
        "bu" => Some("Burma"),
        "bw" => Some("Botswana"),
        "by" => Some("Belarus"),
        "bz" => Some("Belize"),
        "ca" => Some("Canada"),
        "cg" => Some("Congo"),
        "ch" => Some("Switzerland"),
        "cl" => Some("Chile"),
        "cm" => Some("Cameroon"),
        "cn" => Some("China"),
        "co" => Some("Colombia"),
        "cq" => Some("Sark"),
        "cu" => Some("Cuba"),
        "cy" => Some("Cyprus"),
        "cz" => Some("Czechia"),
        "de" => Some("Germany"),
        "dj" => Some("Djibouti"),
        "dk" => Some("Denmark"),
        "dm" => Some("Dominica"),
        "dz" => Some("Algeria"),
        "ec" => Some("Ecuador"),
        "ee" => Some("Estonia"),
        "eg" => Some("Egypt"),
        "er" => Some("Eritrea"),
        "es" => Some("Spain"),
        "et" => Some("Ethiopia"),
        "ez" => Some("Eurozone"),
        "fi" => Some("Finland"),
        "fj" => Some("Fiji"),
        "fr" => Some("France"),
        "ga" => Some("Gabon"),
        "gd" => Some("Grenada"),
        "ge" => Some("Georgia"),
        "gg" => Some("Guernsey"),
        "gh" => Some("Ghana"),
        "gi" => Some("Gibraltar"),
        "gl" => Some("Greenland"),
        "gm" => Some("Gambia"),
        "gn" => Some("Guinea"),
        "gp" => Some("Guadeloupe"),
        "gr" => Some("Greece"),
        "gt" => Some("Guatemala"),
        "gu" => Some("Guam"),
        "gy" => Some("Guyana"),
        "hn" => Some("Honduras"),
        "hr" => Some("Croatia"),
        "ht" => Some("Haiti"),
        "hu" => Some("Hungary"),
        "id" => Some("Indonesia"),
        "ie" => Some("Ireland"),
        "il" => Some("Israel"),
        "in" => Some("India"),
        "iq" => Some("Iraq"),
        "is" => Some("Iceland"),
        "it" => Some("Italy"),
        "je" => Some("Jersey"),
        "jm" => Some("Jamaica"),
        "jo" => Some("Jordan"),
        "jp" => Some("Japan"),
        "ke" => Some("Kenya"),
        "kg" => Some("Kyrgyzstan"),
        "kh" => Some("Cambodia"),
        "ki" => Some("Kiribati"),
        "km" => Some("Comoros"),
        "kw" => Some("Kuwait"),
        "kz" => Some("Kazakhstan"),
        "lb" => Some("Lebanon"),
        "li" => Some("Liechtenstein"),
        "lr" => Some("Liberia"),
        "ls" => Some("Lesotho"),
        "lt" => Some("Lithuania"),
        "lu" => Some("Luxembourg"),
        "lv" => Some("Latvia"),
        "ly" => Some("Libya"),
        "ma" => Some("Morocco"),
        "mc" => Some("Monaco"),
        "md" => Some("Moldova"),
        "me" => Some("Montenegro"),
        "mg" => Some("Madagascar"),
        "ml" => Some("Mali"),
        "mm" => Some("Myanmar"),
        "mn" => Some("Mongolia"),
        "mo" => Some("Macao"),
        "mq" => Some("Martinique"),
        "mr" => Some("Mauritania"),
        "ms" => Some("Montserrat"),
        "mt" => Some("Malta"),
        "mu" => Some("Mauritius"),
        "mv" => Some("Maldives"),
        "mw" => Some("Malawi"),
        "mx" => Some("Mexico"),
        "my" => Some("Malaysia"),
        "mz" => Some("Mozambique"),
        "na" => Some("Namibia"),
        "ne" => Some("Niger"),
        "ng" => Some("Nigeria"),
        "ni" => Some("Nicaragua"),
        "nl" => Some("Netherlands"),
        "no" => Some("Norway"),
        "np" => Some("Nepal"),
        "nr" => Some("Nauru"),
        "nu" => Some("Niue"),
        "om" => Some("Oman"),
        "pa" => Some("Panama"),
        "pe" => Some("Peru"),
        "ph" => Some("Philippines"),
        "pk" => Some("Pakistan"),
        "pl" => Some("Poland"),
        "pn" => Some("Pitcairn"),
        "pt" => Some("Portugal"),
        "pw" => Some("Palau"),
        "py" => Some("Paraguay"),
        "qa" => Some("Qatar"),
        "ro" => Some("Romania"),
        "rs" => Some("Serbia"),
        "rw" => Some("Rwanda"),
        "sc" => Some("Seychelles"),
        "sd" => Some("Sudan"),
        "se" => Some("Sweden"),
        "sg" => Some("Singapore"),
        "si" => Some("Slovenia"),
        "sk" => Some("Slovakia"),
        "sn" => Some("Senegal"),
        "so" => Some("Somalia"),
        "sr" => Some("Suriname"),
        "sz" => Some("Eswatini"),
        "td" => Some("Chad"),
        "tg" => Some("Togo"),
        "th" => Some("Thailand"),
        "tj" => Some("Tajikistan"),
        "tk" => Some("Tokelau"),
        "tm" => Some("Turkmenistan"),
        "tn" => Some("Tunisia"),
        "to" => Some("Tonga"),
        "tv" => Some("Tuvalu"),
        "us" => Some("United States"),
        "ua" => Some("Ukraine"),
        "ug" => Some("Uganda"),
        "uy" => Some("Uruguay"),
        "uz" => Some("Uzbekistan"),
        "ve" => Some("Venezuela"),
        "vu" => Some("Vanuatu"),
        "ws" => Some("Samoa"),
        "ye" => Some("Yemen"),
        "yt" => Some("Mayotte"),
        "yu" => Some("Yugoslavia"),
        "zm" => Some("Zambia"),
        "zr" => Some("Zaire"),
        "zw" => Some("Zimbabwe"),
        _ => None,
    }
    .map(str::to_string)
}
